#!/bin/bash
# Wrapper for imagemagick that encapsulates our thumbnail logic.
# @author Damon Snyder (damon@huddler-inc.com) 

IMAGEMAGICK_BASE=${IMAGEMAGICK_BASE:-"/usr/local"}
CONVERT=$IMAGEMAGICK_BASE/bin/convert
IDENTIFY=$IMAGEMAGICK_BASE/bin/identify
GIF2WEBP=${GIF2WEBP:-"/usr/bin/gif2webp"}
CWEBP=${CWEBP:-"/usr/bin/cwebp"}

# timeout - run a command with a time limit
# After 5 min of converting we can assume we will never get result. Time is in seconds.
TIMEOUT=${TIMEOUT:-"/usr/bin/timeout"}
TIMEOUT_TIME=${TIMEOUT_TIME:-" --kill-after=30 --signal=SIGKILL 300"}
GIF2WEBP_TIMEOUT_TIME=${GIF2WEBP_TIMEOUT_TIME:-" --kill-after=10 --signal=SIGKILL 60"}
CWEBP_TIMEOUT_TIME=${CWEBP_TIMEOUT_TIME:-" --kill-after=5 --signal=SIGKILL 30"}

# If you are running on OS X, then install the gnu-getopt and coreutils. The native getopt and stat
# on OS X are not compatible with the options used on Centos which is where this was originally
# targeted.
# $ brew install gnu-getopt coreutils
# $ export GETOPT=/usr/local/opt/gnu-getopt/bin/getopt
# $ export STAT=/usr/local/opt/coreutils/bin/gstat
GETOPT=${GETOPT:-"/usr/bin/getopt"}
STAT=${STAT:-"/usr/bin/stat"}

# what memory, mapping, thread and time constraints do we want to put on the
# thumbnailing process? this will help to ensure that any given thumbnail
# doesn't overwhelm us.
# 
# imagemagick first tries to allocate the pixels in memory. if that fails or
# exceeds the limit, it next allocates to disks and memory maps the file. if
# that allocation exceeds the map limit, it then goes to disk. 
#
# If you are running on OS X, install ImageMagick with
# $ brew install imagemagick --with-webp --with-librsvg
# Then 
# $ export CONVERT_CONSTRAINTS=" "
# The options below result in a segfault on OS X.
CONVERT_CONSTRAINTS=${CONVERT_CONSTRAINTS:-" -limit memory 256MB -limit map 256MB -limit disk 1024MB -limit thread 2 -limit time 60 "}

# dial down the quality level. this should save us some space without
# sacrificing too much image quality. in the tests that were done, this
# produced images that were closer in size to what is currently being created
# with phpthumb
# JPEG_QUALITY_LEVEL quality is used when generating JPEG thumbnails
JPEG_QUALITY_LEVEL=80

# When generating PNG thumbnails, this produces smaller file sizes
PNG_QUALITY_LEVEL=100

# Quality used for generating WebP images from JPEG
WEBP_JPEG_QUALITY_LEVEL=90

# When compressing PNG to WEBP, do the lossless compression first
WEBP_PNG_QUALITY_LEVEL="100 -define webp:lossless=true"

# Options for using cwebp when trying out the lossy version of an image
CWEBP_OPTIONS="-m 6"

# When presenting PNG's using WebP we should use higher quality to avoid artifacts
CWEBP_PNG_QUALITY_LEVEL=90

# When presenting full size PNGs we should use even higher quality
CWEBP_FULLSIZE_PNG_QUALITY_LEVEL=95

# Quality setting for imagemagick GIF->WebP conversion (non-animated GIF files)
WEBP_GIF_QUALITY_LEVEL=90

# WebP compression method to use, 6 means slower processing but better compression ratio.
WEBP_COMPRESSION_METHOD="-define webp:method=6"

# Animated GIFs are converted to
GIF2WEBP_OPTIONS="-mixed -q 90 -m 6 -min_size"

MODE_OPTIONS=(
	"fixed-aspect-ratio"
	"fixed-aspect-ratio-down"
	"scale-to-width"
	"scale-to-width-down"
	"scale-to-height-down"
	"thumbnail"
	"thumbnail-down"
	"top-crop"
	"top-crop-down"
	"window-crop"
	"window-crop-fixed"
	"zoom-crop"
	"zoom-crop-down"
	"type-convert"
)

TYPE_JPEG="JPEG"
TYPE_GIF="GIF"
TYPE_SVG="SVG"
TYPE_PNG="PNG"

function usage() {
cat <<EOF
    usage: $0
    --in             FILE   the image we are thumbnailing
    --out            FILE   output the thumbnail to this file
    --height         INT    the height
    --width          INT    the width

    --frame                 only use this frame of the image (for animated gifs)
    --fill                  pad or fill color for the image background. only used with --mode fixed-aspect-ratio

    --fuzz           PERC   fuzz factor as percentage. give --fuzz 2% as an example
                             colors within this distance are considered equal.
                             currently only applied to animated gifs

    --mode           MODE   The thumbnail/render mode. Supported options: ${MODE_OPTIONS[*]}
    --x-offset       INT    when using window-crop, where to start the window, from the left
    --window-width   INT    when using window-crop, the width of the window
    --y-offset       INT    when using window-crop, where to start the window, from the top
    --window-height  INT    when using window-crop, the height of the window

    --help                  print this

EOF
}

# Test for array containment.
# Example: $(contains "${A[@]}", "foo") == "y"
# Returns "y"" when the object is contained in the array and "n" otherwise.
# http://stackoverflow.com/questions/3685970/check-if-an-array-contains-a-value
function contains() {
	local n=$#
	local value=${!n}
	for ((i=1;i < $#;i++)) {
		if [ "${!i}" == "${value}" ]; then
			echo "y"
			return 0
		fi
	}

	echo "n"
	return 1
}


OS=$(uname)
SHORTOPTS="h"
LONGOPTS="in:,out:,width:,height:,fuzz:,help,fill:,frame:,mode:,x-offset:,window-width:,y-offset:,window-height:"

ARGS=$($GETOPT -s bash --options $SHORTOPTS --longoptions $LONGOPTS -- "$@")

IN=''
OUT=''
HEIGHT=''
WIDTH=''
FILL="white"
STILL=0
STILL_FRAME=0
MODE='thumbnail-down'
X_OFFSET=''
Y_OFFSET=''
WINDOW_WIDTH=''
WINDOW_HEIGHT=''

THUMB_PARAMS=''
THUMB_PRE_OPTIONS=''
FUZZ=''

eval set -- "$ARGS"

while true; do
	case $1 in
		--help)
			usage
			exit 1
			;;
		--in)
			shift
			IN=$1
			;;
		--out)
			shift
			OUT=$1
			;;
		--height)
			shift
			HEIGHT=$1
			;;
		--width)
			shift
			WIDTH=$1
			;;
		--x-offset)
			shift
			X_OFFSET=$1
			;;
		--window-width)
			shift
			WINDOW_WIDTH=$1
			;;
		--y-offset)
			shift
			Y_OFFSET=$1
			;;
		--window-height)
			shift
			WINDOW_HEIGHT=$1
			;;
		--fuzz)
			shift
			FUZZ="-fuzz $1"
			;;
		--mode)
			shift
			MODE=$1
			;;
		--fill)
			shift
			FILL="'$1'" # see http://www.imagemagick.org/script/command-line-options.php#background for the supported parameters
			;;
		--frame)
		  shift
			STILL=1
			STILL_FRAME=$1
			;;
		--)
			shift
			break
			;;
		*)
			shift
			break
			;;
	esac
	shift
done

if [ "$IN"X = "X" ]; then
	echo "--in required"
	usage
	exit 1
fi

if [ "$OUT"X = "X" ]; then
	echo "--out required"
	usage
	exit 1
fi

MODES_REQUIRING_WIDTH=("${MODE_OPTIONS[@]/"scale-to-height-down"}")
MODES_REQUIRING_WIDTH=("${MODES_REQUIRING_WIDTH[@]/"type-convert"}")
MODES_REQUIRING_HEIGHT=("fixed-aspect-ratio" "fixed-aspect-ratio-down" "thumbnail" "thumbnail-down" "top-crop" "top-crop-down" "window-crop-fixed" "zoom-crop" "zoom-crop-down" "scale-to-height-down")

if [ "$HEIGHT"X = "X" ]; then
	if [ $(contains "${MODES_REQUIRING_HEIGHT[@]}" "${MODE}") == "y" ]; then
		echo "--height required for mode ${MODE}"
		usage
		exit 1
	fi
fi

if [ "$WIDTH"X = "X" ]; then
	if [ $(contains "${MODES_REQUIRING_WIDTH[@]}" "${MODE}") == "y" ]; then
		echo "--width required"
		usage
		exit 1
	fi
fi

valid_mode=0
for mode_option in "${MODE_OPTIONS[@]}"
do
	if [ "$mode_option" == "$MODE" ]; then
		valid_mode=1
	fi
done

if [ $valid_mode -ne 1 ]; then
	echo "Valid mode options are: ${MODE_OPTIONS[*]}"
	usage
	exit 1
fi

if [[ "$MODE" == "window-crop" || "$MODE" == "window-crop-fixed" ]]; then
	if [ "$X_OFFSET"X = "X" ]; then
		echo "--x-offset required when --mode=window-crop"
		exit 1
	fi

	if [ "$WINDOW_WIDTH"X = "X" ]; then
		echo "--x-width required when --mode=window-crop"
		exit 1
	fi

	if [ "$Y_OFFSET"X = "X" ]; then
		echo "--y-offset required when --mode=window-crop"
		exit 1
	fi

	if [ "$WINDOW_HEIGHT"X = "X" ]; then
		echo "--y-height required when --mode=window-crop"
		exit 1
	fi
fi


shopt -s nocasematch

ORIGINAL_FORMAT=$($IDENTIFY -format "%m\n" "$IN" | head -1)

function original_is() {
	if [[ ${ORIGINAL_FORMAT} == "$1" ]]; then
		return 1
	else
		return 0
	fi
}

function target_webp() {
	if [[ "$1" =~ ^webp: ]]; then
		return 1
	else
		return 0
	fi
}

function remove_custom_type() {
	OUT=${OUT#*:}
}

function set_custom_type() {
	remove_custom_type
	OUT="${1}:${OUT}"
}

function recalculate_requested_size_for_crop_down() {
	# recalculate output image dimensions in cases of "...-crop-down" modes
	# in such a way that an output image has the same aspect ratio as request
	# after executing imagemagick
	local origwidth=$1
	local origheight=$2
	local CODE
	local x
	local y

	# need to use bc for floating-point arithmetic below
	local CODE=`cat <<EOF
scale = 20
define trunc(x) {
	auto saved_scale
	saved_scale = scale
	scale = 0
	x /= 1   /* round x down */
	scale = saved_scale
	return (x)
}

define round(x) {
	x += 0.5 /* round */
	x += 0.000000001 /* epsilon */
	return trunc(x)
}

min_acceptable_scale = 1
candidate_scale = $origwidth / $WIDTH
if (candidate_scale < min_acceptable_scale) min_acceptable_scale = candidate_scale

candidate_scale = $origheight / $HEIGHT
if (candidate_scale < min_acceptable_scale) min_acceptable_scale = candidate_scale

round($WIDTH * min_acceptable_scale)
round($HEIGHT * min_acceptable_scale)

/* debug information - ignored on production */
min_acceptable_scale
$WIDTH * min_acceptable_scale
$HEIGHT * min_acceptable_scale
EOF
`
	local CALCOUT=`echo "$CODE" | bc`

	WIDTH=`echo "$CALCOUT" | head -n 1`
	HEIGHT=`echo "$CALCOUT" | head -n 2 | tail -n 1`
}

function thumb_params() {
	QUALITY=''

	if [ "$HEIGHT"X = "X" ]; then
			HEIGHT=${WIDTH}
	fi

	original_is ${TYPE_JPEG}
	jpeg=$?


	original_is ${TYPE_PNG}
	png=$?

	original_is ${TYPE_GIF}
	gif=$?

	target_webp ${OUT}
	webp=$?

	if [[ $jpeg -eq 1 ]]; then
		if [[ $webp -eq 1 ]]; then
			QUALITY="-quality ${WEBP_JPEG_QUALITY_LEVEL} ${WEBP_COMPRESSION_METHOD}"
		else
			QUALITY="-quality ${JPEG_QUALITY_LEVEL}"
		fi
	fi

	if [[ $png -eq 1 ]]; then
		if [[ $webp -eq 1 ]]; then
			QUALITY="-quality ${WEBP_PNG_QUALITY_LEVEL} ${WEBP_COMPRESSION_METHOD}"
		else
			QUALITY="-quality ${PNG_QUALITY_LEVEL}"
		fi
	fi

	if [[ $gif -eq 1 ]] && [[ $webp -eq 1 ]]; then
		QUALITY="-quality ${WEBP_GIF_QUALITY_LEVEL} ${WEBP_COMPRESSION_METHOD}"
	fi

	# fixed-aspect-ratio (was LS, read fixed-aspect-ratio): thumbnail using a fixed aspect ratio and fill to generate a thumbnail with the exact dimensions given; no upscaling.
	# thumbnail-down (was LL): no upscaling, no padding -- default
	# thumbnail (was LM): allow output enlargement
	# zoom-crop (was ZC): zoom then crop; enlargement ok-- it blows up the image then crops to the exact dimensions
	# zoom-crop-down (was NS): like zoom crop, but will not scale up

	case $MODE in
		"fixed-aspect-ratio")
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT} -gravity center -background ${FILL} -extent ${WIDTH}x${HEIGHT}!"
			;;
		"fixed-aspect-ratio-down")
			# get height and width
			origheight=$($IDENTIFY -format "%h\n" "$IN" | head -1)
			origwidth=$($IDENTIFY -format "%w\n" "$IN" | head -1)

			if [[ $HEIGHT -gt $origheight && $WIDTH -gt $origwidth ]]; then # requested is bigger on both sides
				THUMB_PARAMS="${QUALITY} -gravity center -background ${FILL} -extent ${WIDTH}x${HEIGHT}!"
			else # original is bigger on at least side, so we can proceed just like --fixed-aspect-ratio
				THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT} -gravity center -background ${FILL} -extent ${WIDTH}x${HEIGHT}!"
			fi
			;;
		"scale-to-width")
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}"
			;;
		"scale-to-width-down")
			# get width
			origwidth=$($IDENTIFY -format "%w\n" "$IN" | head -1)

			if [[ "$WIDTH"X = "X" || $WIDTH = 0 || $WIDTH -gt $origwidth ]]; then # requested is bigger, keep the original size
				THUMB_PARAMS="${QUALITY}"
			else # original is smaller or equal on both sides, so we can proceed just like --fixed-aspect-ratio
				THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}"
			fi
			;;
		"scale-to-height-down")
			# get height
			origheight=$($IDENTIFY -format "%h\n" "$IN" | head -1)

			if [[ "$HEIGHT"X = "X" || $HEIGHT = 0 || $HEIGHT -gt $origheight ]]; then # requested is bigger, keep the original size
				THUMB_PARAMS="${QUALITY}"
			else
				THUMB_PARAMS="${QUALITY} -thumbnail x${HEIGHT}"
			fi
			;;
		"thumbnail")
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}"
			;;
		"thumbnail-down")
			# the '>' means change as per WIDTHxHEIGHT but only if an image dimension exceeds a specified dimension.
			THUMB_PARAMS="${QUALITY} -thumbnail '${WIDTH}x${HEIGHT}>'"
			;;
		"top-crop")
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}^ -gravity north -background none -extent ${WIDTH}x${HEIGHT}"
			;;
		"top-crop-down")
			# get height and width
			origheight=$($IDENTIFY -format "%h\n" "$IN" | head -1)
			origwidth=$($IDENTIFY -format "%w\n" "$IN" | head -1)
			echo "Height ${origheight} x Width ${origwidth}"
			if [[ $origheight -gt $HEIGHT && $origwidth -gt $WIDTH ]]; then
				THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}+0+0^ -gravity north -crop ${WIDTH}x${HEIGHT}+0+0!"
			else
				recalculate_requested_size_for_crop_down $origwidth $origheight
				THUMB_PARAMS="${QUALITY} -gravity north -crop ${WIDTH}x${HEIGHT}+0+0 -thumbnail ${WIDTH}x${HEIGHT}+0+0"
			fi
			;;
		"window-crop")
			# When PNGs are used we need to make sure the source image's transparency
			# is preserved. See http://www.imagemagick.org/Usage/crop/#border and the
			# 'Border and Alpha Composition' section regarding regarding transparency.
			THUMB_PARAMS="${QUALITY} \( ${IN} -compose Copy -extent ${WINDOW_WIDTH}x${WINDOW_HEIGHT}+${X_OFFSET}+${Y_OFFSET}! -thumbnail ${WINDOW_WIDTH}x${WINDOW_HEIGHT}! \)"
			THUMB_PARAMS="${THUMB_PARAMS} \( -thumbnail ${WIDTH} \)"
			IN="" # is now part of THUMB_PARAMS
			;;
		"window-crop-fixed")
			THUMB_PARAMS="${QUALITY} \( ${IN} -extent ${WINDOW_WIDTH}x${WINDOW_HEIGHT}+${X_OFFSET}+${Y_OFFSET}! -thumbnail ${WINDOW_WIDTH}x${WINDOW_HEIGHT}! \)"
			THUMB_PARAMS="${THUMB_PARAMS} \( -thumbnail ${WIDTH}x${HEIGHT} -gravity center -background ${FILL} -extent ${WIDTH}x${HEIGHT}! \)"
			IN="" # is now part of THUMB_PARAMS
			;;
		"zoom-crop")
			# the '^' means Minimum values of width and height given, aspect ratio
			# preserved. see http://www.imagemagick.org/script/command-line-processing.php#geometry
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}^ -gravity center -background none -extent ${WIDTH}x${HEIGHT}"
			;;
		"zoom-crop-down")
			# get height and width
			origheight=$($IDENTIFY -format "%h\n" "$IN" | head -1)
			origwidth=$($IDENTIFY -format "%w\n" "$IN" | head -1)
			echo "Height ${origheight} x Width ${origwidth}"
			if [[ $origheight -gt $HEIGHT && $origwidth -gt $WIDTH ]]; then
				THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}+0+0^ -gravity center -crop ${WIDTH}x${HEIGHT}+0+0!"
			else
				recalculate_requested_size_for_crop_down $origwidth $origheight
				THUMB_PARAMS="${QUALITY} -gravity center -crop ${WIDTH}x${HEIGHT}+0+0 -thumbnail ${WIDTH}x${HEIGHT}+0+0"
			fi
			;;
		"type-convert")
			THUMB_PARAMS="${QUALITY}"
	esac
}

function animated_thumb_params() {
	thumb_params
	remove_custom_type
	THUMB_PARAMS="-coalesce ${THUMB_PARAMS} ${FUZZ} -layers Optimize"
}


function is_animated() {
	num=$($IDENTIFY -format "%n\n" "$1"|head -n 1)
	if [[ $num -gt 1 ]]; then
		return 1
	else
		return 0
	fi
}

# set background = none to preserve original backgrounds for svgs, and calculate density for
# scaling svg (http://www.imagemagick.org/discourse-server/viewtopic.php?t=11168#p37647)
function svg_preoptions() {
	local default_density=72
	local orig_height=$($IDENTIFY -format "%h\n" "$IN" | head -1)
	local orig_width=$($IDENTIFY -format "%w\n" "$IN" | head -1)

	if [[ ${orig_width} -gt ${WIDTH} || ${orig_height} -gt ${HEIGHT} ]]; then
		THUMB_PRE_OPTIONS="-background none"
	else
		local width_density=`echo "(1.5 * ${WIDTH}) / (${orig_width} / ${default_density})" | bc -l`
		local height_density=`echo "(1.5 * ${HEIGHT}) / (${orig_height} / ${default_density})" | bc -l`

		THUMB_PRE_OPTIONS="-background none -density ${width_density}x${height_density}"
	fi
}

function thumb() {
	original_is $TYPE_GIF
	gif=$?
	is_animated "$IN"
	animated=$?

	original_is ${TYPE_PNG}
	png=$?

	target_webp ${OUT}
	webp=$?

	if [[ $gif -eq 1 && $animated -eq 1 && $STILL -ne 1 ]]; then
		animated_thumb_params
	else
		thumb_params
	fi

	original_is $TYPE_SVG
	svg=$?

	if [[ $svg -eq 1 ]]; then
		set_custom_type $TYPE_PNG
		svg_preoptions
	fi

	if [[ $animated -eq 1 && $STILL -eq 1 ]]; then
		magick="${TIMEOUT} ${TIMEOUT_TIME} ${CONVERT} ${THUMB_PRE_OPTIONS} "${IN}[${STILL_FRAME}]" ${CONVERT_CONSTRAINTS} "-auto-orient" ${THUMB_PARAMS} ${OUT}"
		echo ${magick}
		exec ${magick}
	else
		if [[ $gif -eq 1 && $animated -eq 1 && "$MODE" = "type-convert" ]]; then
			# For animated GIFs imagemagick is likely to exhaust resources. So for full size GIFs
			# when we only convert them the webp format (without extracting a frame), we can skip
			# the thumbnailing parameters so imagemagick will just copy the file. The type
			# conversion is done by gif2webp anyway.
			magick="${TIMEOUT} ${TIMEOUT_TIME} ${CONVERT} ${THUMB_PRE_OPTIONS} "${IN}" ${CONVERT_CONSTRAINTS} "${OUT}""
		else
			magick="${TIMEOUT} ${TIMEOUT_TIME} ${CONVERT} ${THUMB_PRE_OPTIONS} "${IN}" ${CONVERT_CONSTRAINTS} "-auto-orient" ${THUMB_PARAMS} "${OUT}""
		fi

		if eval ${magick}; then
			echo ${magick}
			if [[ $png -eq 1 && $webp -eq 1 ]]; then
				remove_custom_type
				if [[ "${MODE}" = "type-convert" ]]; then
					CWEBP_QUALITY="-q ${CWEBP_FULLSIZE_PNG_QUALITY_LEVEL}"
				else
					CWEBP_QUALITY="-q ${CWEBP_PNG_QUALITY_LEVEL}"
				fi
				LOSSY_OUT=${OUT}.webp
				cwebp_call="${TIMEOUT} ${CWEBP_TIMEOUT_TIME} ${CWEBP} ${CWEBP_OPTIONS} ${CWEBP_QUALITY} "${OUT}" -o "${LOSSY_OUT}""
				echo ${cwebp_call}
				if eval ${cwebp_call}; then
					lossless_size=$(${STAT} -c%s ${OUT})
					# var2 contains size of file2
					lossy_size=$(${STAT} -c%s ${LOSSY_OUT})
					if [[ "${lossless_size}" -le "${lossy_size}" ]]; then
						# lossless file was smaller, remove the lossy version
						rm ${LOSSY_OUT}
					else
						# lossy version was smaller, use it
						mv ${LOSSY_OUT} ${OUT}
					fi
				fi
			fi

			if [[ $gif -eq 1 && $animated -eq 1 && $webp -eq 1 ]]; then
				WEBP_OUT=${OUT}.webp
				gif2webp_call="${TIMEOUT} ${GIF2WEBP_TIMEOUT_TIME} ${GIF2WEBP} ${GIF2WEBP_OPTIONS} "${OUT}" -o "${WEBP_OUT}""
				echo ${gif2webp_call}
				if eval ${gif2webp_call}; then
					mv ${WEBP_OUT} ${OUT}
				fi
			fi
			exit 0
		elif [[ $animated -eq 1 ]]; then
			# on a failed thumb due to a (probably) corrupted animated gif, try thumbnailing the first frame
			magick="${TIMEOUT} ${TIMEOUT_TIME} ${CONVERT} ${THUMB_PRE_OPTIONS} "${IN}[0]" ${CONVERT_CONSTRAINTS} "-auto-orient" ${THUMB_PARAMS} ${OUT}"
			echo ${magick}
			exec ${magick}
		else
		  echo ${magick}
		  exit 1
		fi
	fi
}

thumb
